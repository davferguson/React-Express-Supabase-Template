Template Project Setup Notes (React + Express + Supabase)

Overview
- Goal: Reusable full‑stack template with React (Vite + TypeScript) frontend and Express (TypeScript) backend, wired to Supabase for auth, and easy concurrent dev.
- OS/Shell: Windows 10 PowerShell
- Final Node/npm: v22.18.0 / 10.9.3 (Node upgraded by user)

What was created
- Monorepo layout
  - apps/web: Vite React TS app
  - apps/server: Express TS API
- Root scripts to run/build both apps
- Supabase wiring on both client and server
- Dev proxy: frontend /api → backend

Key files and scripts
- Root package.json scripts
  - dev: concurrently "npm:dev:web" "npm:dev:server"
  - dev:web: npm --prefix apps/web run dev
  - dev:server: npm --prefix apps/server run dev
  - build: builds server then web
  - start: runs built server

- apps/server
  - tsconfig.json: CJS, Node resolution, outDir dist, rootDir src
  - src/index.ts: Express app, CORS, JSON, routes
    - GET /api/health: basic health check
    - GET /api/profile: protected route verifying Supabase access token via Authorization: Bearer <token>
  - src/supabase.ts: creates Supabase server client using SUPABASE_URL and SUPABASE_ANON_KEY
  - package.json scripts: dev (ts-node-dev), build (tsc), start (node dist/index.js)
  - env.example
    - PORT=5174
    - CORS_ORIGIN=http://localhost:5173
    - SUPABASE_URL=
    - SUPABASE_ANON_KEY=

- apps/web
  - vite.config.ts: proxy /api → http://localhost:5174
  - src/lib/supabaseClient.ts: client createClient using VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY
  - src/App.tsx: minimal UI for email/password sign in/out and calling /api/profile
  - env.example
    - VITE_SUPABASE_URL=
    - VITE_SUPABASE_ANON_KEY=

Dependencies installed
- Root: concurrently
- web: Vite React TS stack (from template) + @supabase/supabase-js
- server: express, cors, dotenv, @supabase/supabase-js, typescript, ts-node-dev, @types/node, @types/express, @types/cors

Notable issues and resolutions
- Vite scaffold required Node >= 20.19 or >= 22.12; user upgraded Node to v22.18.0.
- Missing @types/cors caused a TS build error; installed @types/cors.
- Server crashed when SUPABASE_URL/ANON_KEY were not set; added warnings and env.example guidance.

How to run locally
1) Create env files
  - apps/web/.env
    - VITE_SUPABASE_URL=your_supabase_url
    - VITE_SUPABASE_ANON_KEY=your_anon_key
  - apps/server/.env
    - PORT=5174
    - CORS_ORIGIN=http://localhost:5173
    - SUPABASE_URL=your_supabase_url
    - SUPABASE_ANON_KEY=your_anon_key

2) Commands (from repo root)
  - Install once: npm i
  - Dev: npm run dev
    - Web: http://localhost:5173
    - API health: http://localhost:5174/api/health
  - Build: npm run build
  - Start built API: npm run start

Auth testing flow
- In the web app, enter an email/password for an existing Supabase user and click Sign In.
- Click "Call /api/profile"; the frontend sends the Supabase access token as Bearer auth to the backend.
- The backend verifies the token using supabase.auth.getUser(token) and returns user id/email or 401.

Reusing this template
- Copy the repo and update both .env files with your Supabase keys.
- Adjust CORS_ORIGIN, ports, and proxy target if needed.
- Rename packages in apps/*/package.json if desired.

Verification performed
- API /api/health returned { ok: true, service: 'server', env: 'development' }.
- Vite responded with HTTP 200 on http://localhost:5173.
- Full build succeeded: server tsc and web vite build completed.


